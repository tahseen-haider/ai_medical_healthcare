generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider   = "mongodb"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

//
// ENUMS
//

enum UserRole {
  admin
  user
  doctor
}

enum DoctorType {
  general
  cardiologist
  dermatologist
  pediatrician
  neurologist
  psychiatrist
  dentist
  surgeon
  gynecologist
  orthopedist
}

enum MessageRole {
  user
  assistant
}

enum AppointmentStatus {
  PENDING
  PAYMENT_PENDING
  PAID
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum NotificationType {
  APPOINTMENT_UPDATE
  GENERAL_ANNOUNCEMENT
  PRESCRIPTION_REMINDER
  SYSTEM_ALERT
}

//
// MODELS
//

model User {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  email                String               @unique
  phone                String?
  name                 String
  dob                  String?
  gender               String?
  password             String?
  pfp                  String?
  createdAt            DateTime             @default(now())
  role                 UserRole             @default(user)
  is_verified          Boolean              @default(false)
  token                Int?
  ai_tokens_used       Int?
  doctorProfile        DoctorProfile?

  // Health-related fields (Patient-specific)
  chronicConditions    String[]             @default([])
  medications          String[]             @default([])
  surgeries            String[]             @default([])
  immunizations        String[]             @default([])
  bloodPressure        String?
  heartRate            Int?
  respiratoryRate      Int?
  temperature          Float?
  bloodType            String?
  allergies            String[]             @default([])
  smoker               Boolean?
  alcoholUse           Boolean?
  exerciseFrequency    String?
  mentalHealthConcerns String[]             @default([])
  notes                String?
  height               Int?
  weight               Int?
  lastCheckUp          DateTime?

  // Preferences
  emailNotifications   Boolean              @default(true)
  smsReminders         Boolean              @default(true)
  twoFactorEnabled     Boolean              @default(false)
  lastLogin            DateTime?

  // Relations
  chats                ChatSession[]
  accounts             Account[]
  appointmentsAsDoctor Appointments[]       @relation("DoctorAppointments")
  appointmentsAsPatient Appointments[]      @relation("PatientAppointments")
  notifications        Notification[]
  sentMessages         AppointmentMessage[] @relation("SentMessages")
  receivedMessages     AppointmentMessage[] @relation("ReceivedMessages")
}

model DoctorProfile {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  userId          String     @unique @db.ObjectId
  user            User       @relation(fields: [userId], references: [id])
  doctorType      DoctorType
  specialization  String?
  qualifications  String?
  experience      Int?
  bio             String?
  clinicName      String?
  clinicAddress   String?
  consultationFee Int?
  availableDays   String[]
  availableTimes  String?
  isApproved      Boolean    @default(false)
  ratings         Float?
  totalReviews    Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  user              User    @relation(fields: [userId], references: [id])
  
  @@unique([provider, providerAccountId])
}

model ChatSession {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  title     String?
  summary   String?
  messages  Message[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Message {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String      @db.ObjectId
  chat      ChatSession @relation(fields: [chatId], references: [id])
  role      MessageRole
  content   String
  image     String?
  createdAt DateTime    @default(now())
}

model AppointmentMessage {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  content        String
  senderId       String       @db.ObjectId
  receiverId     String       @db.ObjectId
  appointmentId  String       @db.ObjectId
  createdAt      DateTime     @default(now())
  is_read        Boolean      @default(false)

  // Relations
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  appointment    Appointments @relation(fields: [appointmentId], references: [id])
}


model Appointments {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  fullname             String
  email                String
  phone                String?
  reasonForVisit       String
  preferredDate        DateTime
  preferredTime        String
  status               AppointmentStatus    @default(PENDING)
  is_paid              Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  doctorId             String?
  patientId            String?
  doctor               User?                @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient              User?                @relation("PatientAppointments", fields: [patientId], references: [id])

  // Relations
  appointmentMessages  AppointmentMessage[] @relation()
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  link      String?
  relatedId String?
}

model Inquiries {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullname  String
  email     String
  inquiry   String
  is_read   Boolean  @default(false)
  createdAt DateTime @default(now())
}
